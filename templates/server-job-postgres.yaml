{{- if $.Values.server.enabled }}
{{- if .Values.schema.setup.enabled }}
{{- if and (eq .Values.server.config.persistence.default.driver "sql") (eq .Values.server.config.persistence.default.sql.driver "postgres")}}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "temporal.componentname" (list . "schema-setup") }}
  labels:
    app.kubernetes.io/name: {{ include "temporal.name" . }}
    helm.sh/chart: {{ include "temporal.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: {{ .Chart.Name }}
  annotations:
    {{- if .Values.postgresql.enabled }}
    "helm.sh/hook": post-install
    {{- else }}
    "helm.sh/hook": pre-install
    {{- end }}
    "helm.sh/hook-weight": "0"
    {{- if not .Values.debug }}
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    {{- end }}
spec:
  backoffLimit: {{ .Values.schema.setup.backoffLimit }}
  template:
    metadata:
      name: {{ include "temporal.componentname" (list . "schema-setup") }}
      labels:
        app.kubernetes.io/name: {{ include "temporal.name" . }}
        helm.sh/chart: {{ include "temporal.chart" . }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: {{ .Chart.Name }}
    spec:
      {{ include "temporal.serviceAccount" . }}
      restartPolicy: "OnFailure"
      initContainers:
        - name: check-postgresql-service
          image: busybox
          command: ['sh', '-c', 'until nslookup {{ .Values.server.config.persistence.default.sql.host }}; do echo waiting for postgresql domain; sleep 1; done;']
        - name: check-postgresql
          image: "{{ .Values.postgresql.image.repo }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          command: ['sh', '-c', 'until pg_isready --host={{ .Values.server.config.persistence.default.sql.host }} --port={{ .Values.server.config.persistence.default.sql.port }}; do echo waiting for postgres to start; sleep 1; done;']
        {{- range $store := (list "temporal" "temporal_visibility") }}
        - name: create-{{ $store | replace "_" "-"}}-store
          image: "{{ $.Values.admintools.image.repository }}:{{ $.Values.admintools.image.tag }}"
          imagePullPolicy: {{ $.Values.admintools.image.pullPolicy }}
          command: ['sh', '-c', 'temporal-sql-tool --ep $SQL_HOST -p $SQL_PORT -u $SQL_USER --pw $SQL_PASSWORD --db {{ $store }} --plugin postgres create']
          env:
            - name: SQL_HOST
              value: {{ $.Values.server.config.persistence.default.sql.host }}
            - name: SQL_PORT
              value: {{ $.Values.server.config.persistence.default.sql.port }}
            - name: SQL_USER
              value: {{ $.Values.server.config.persistence.default.sql.user }}
            - name: SQL_PASSWORD
              value: {{ $.Values.server.config.persistence.default.sql.password }}
        {{- end }}
      containers:
        {{- range $store := (list "temporal" "temporal_visibility") }}
        - name: {{ $store | replace "_" "-"}}-schema
          image: "{{ $.Values.admintools.image.repository }}:{{ $.Values.admintools.image.tag }}"
          imagePullPolicy: {{ $.Values.admintools.image.pullPolicy }}
          command: ['sh', '-c', 'temporal-sql-tool --ep $SQL_HOST -p $SQL_PORT -u $SQL_USER --pw $SQL_PASSWORD --db {{ $store }} --plugin postgres setup-schema -v 0.0']
          env:
            - name: SQL_HOST
              value: {{ $.Values.server.config.persistence.default.sql.host }}
            - name: SQL_PORT
              value: {{ $.Values.server.config.persistence.default.sql.port }}
            - name: SQL_USER
              value: {{ $.Values.server.config.persistence.default.sql.user }}
            - name: SQL_PASSWORD
              value: {{ $.Values.server.config.persistence.default.sql.password }}
        {{- end }}
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (default $.Values.server.nodeSelector) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
---
{{- end }}
{{- if .Values.schema.update.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "temporal.componentname" (list . "schema-update") }}
  labels:
    app.kubernetes.io/name: {{ include "temporal.name" . }}
    helm.sh/chart: {{ include "temporal.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: {{ .Chart.Name }}
  annotations:
    {{- if .Values.postgresql.enabled }}
    "helm.sh/hook": post-install,pre-upgrade
    {{- else }}
    "helm.sh/hook": pre-install,pre-upgrade
    {{- end }}
    "helm.sh/hook-weight": "1"
    {{- if not .Values.debug }}
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    {{- end }}
spec:
  backoffLimit: {{ .Values.schema.update.backoffLimit }}
  template:
    metadata:
      name: {{ include "temporal.componentname" (list . "schema-update") }}
      labels:
        app.kubernetes.io/name: {{ include "temporal.name" . }}
        helm.sh/chart: {{ include "temporal.chart" . }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: {{ .Chart.Name }}
    spec:
      {{ include "temporal.serviceAccount" . }}
      restartPolicy: "OnFailure"
      initContainers:
        - name: check-postgresql-service
          image: busybox
          command: ['sh', '-c', 'until nslookup {{ $.Values.server.config.persistence.default.sql.host }}; do echo waiting for postgresql domain; sleep 1; done;']
        - name: check-postgresql
          image: "{{ $.Values.postgresql.image.repo }}:{{ $.Values.postgresql.image.tag }}"
          imagePullPolicy: {{ $.Values.postgresql.image.pullPolicy }}
          command: ['sh', '-c', 'until pg_isready --host={{ $.Values.server.config.persistence.default.sql.host }} --port={{ $.Values.server.config.persistence.default.sql.port }}; do echo waiting for postgres to start; sleep 1; done;']
      containers:
        {{- range $store := (list "temporal" "temporal_visibility") }}
        - name: {{ $store | replace "_" "-" }}-schema-update
          image: "{{ $.Values.admintools.image.repository }}:{{ $.Values.admintools.image.tag }}"
          imagePullPolicy: {{ $.Values.admintools.image.pullPolicy }}
          {{ if eq $store "temporal" }}
          command: ['sh', '-c', 'temporal-sql-tool --ep $SQL_HOST -p $SQL_PORT -u $SQL_USER --pw $SQL_PASSWORD --db {{ $store }} --plugin postgres update-schema -d ./schema/postgresql/v96/temporal/versioned']
          {{ else }}
          command: ['sh', '-c', 'temporal-sql-tool --ep $SQL_HOST -p $SQL_PORT -u $SQL_USER --pw $SQL_PASSWORD --db {{ $store | replace "_" "-" }} --plugin postgres update-schema -d ./schema/postgresql/v96/visibility/versioned']
          {{ end }}
          env:
            - name: SQL_HOST
              value: {{ $.Values.server.config.persistence.default.sql.host }}
            - name: SQL_PORT
              value: {{ $.Values.server.config.persistence.default.sql.port }}
            - name: SQL_USER
              value: {{ $.Values.server.config.persistence.default.sql.user }}
            - name: SQL_PASSWORD
              value: {{ $.Values.server.config.persistence.default.sql.password }}
        {{- end }}
      {{- with (default $.Values.admintools.nodeSelector) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.admintools.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.admintools.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
{{- end }}
